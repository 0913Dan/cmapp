package com.cmapp.test;

import android.app.Activity;
import android.graphics.Matrix;
import android.graphics.PointF;
import android.os.Bundle;
import android.util.FloatMath;
import android.util.Log;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewTreeObserver;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;

public class multiTouch extends Activity{

	private int xPadding;
	private int yPadding;
    // these matrices will be used to move and zoom image
    private Matrix matrix = new Matrix();
    private Matrix savedMatrix = new Matrix();
    // we can be in one of these 3 states
    private static final int NONE = 0;
    private static final int DRAG = 1;
    private static final int ZOOM = 2;
    private int mode = NONE;
    // remember some things for zooming
    private PointF start = new PointF();
    private PointF mid = new PointF();
    private float oldDist = 1f;
    private float d = 0f;
    private float newRot = 0f;
    private float[] lastEvent = null;
    private RelativeLayout LL ;

    @Override
    public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.multitouch);
        ImageView view = (ImageView) findViewById(R.id.imgMultiTouch);
      //  LL =(RelativeLayout)findViewById(R.id.imgLayout);
        view.setOnTouchListener(touchListener);
        RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) view.getLayoutParams();
        //layoutParams.width/=2;
        //layoutParams.height/=2;
        //view.setLayoutParams(layoutParams);

        Log.d("myLog", "W:"+layoutParams.width +"H:"+ layoutParams.height);
    }

    private ImageView.OnTouchListener touchListener =new ImageView.OnTouchListener(){

		@Override
		public boolean onTouch(View v, MotionEvent event) {
			// TODO Auto-generated method stub
			final int X = (int) event.getRawX();
		    final int Y = (int) event.getRawY();
			 ImageView view = (ImageView) v;
		        switch (event.getAction() & MotionEvent.ACTION_MASK) {
		            case MotionEvent.ACTION_DOWN:
		            	RelativeLayout.LayoutParams lParams = (RelativeLayout.LayoutParams) view.getLayoutParams();
			            xPadding = X - lParams.leftMargin;
			            yPadding = Y - lParams.topMargin;
		                savedMatrix.set(matrix);
		                start.set(event.getX(), event.getY());
		                mode = DRAG;
		                lastEvent = null;
		                break;
		            case MotionEvent.ACTION_POINTER_DOWN:
		            	
		            	
		                oldDist = spacing(event);
		                if (oldDist > 10f) {
		                    savedMatrix.set(matrix);
		                    midPoint(mid, event);
		                    mode = ZOOM;
		                }
		                lastEvent = new float[4];
		                lastEvent[0] = event.getX(0);
		                lastEvent[1] = event.getX(1);
		                lastEvent[2] = event.getY(0);
		                lastEvent[3] = event.getY(1);
		                d = rotation(event);
		                break;
		            case MotionEvent.ACTION_UP:
		            case MotionEvent.ACTION_POINTER_UP:
		                mode = NONE;
		                lastEvent = null;
		                break;
		            case MotionEvent.ACTION_MOVE:
		                if (mode == DRAG) {
		                	
		                	RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) view.getLayoutParams();
				            layoutParams.leftMargin = X - xPadding;
				            layoutParams.topMargin = Y - yPadding;
				            layoutParams.rightMargin = -250;
				            layoutParams.bottomMargin = -250;
				            view.setLayoutParams(layoutParams);
		                    /*matrix.set(savedMatrix);
		                    float dx = event.getX() - start.x;
		                    float dy = event.getY() - start.y;
		                    matrix.postTranslate(dx, dy);*/
		                    
		                } else if (mode == ZOOM) {
		                    float newDist = spacing(event);
		                    if (newDist > 10f) {
		                        matrix.set(savedMatrix);
		                        float scale = (newDist / oldDist);
		                        matrix.postScale(scale, scale, mid.x, mid.y);
		                   
		                        
		                        /*RelativeLayout.LayoutParams layoutParams = (RelativeLayout.LayoutParams) LL.getLayoutParams();
		                        RelativeLayout.LayoutParams imgParams = (RelativeLayout.LayoutParams) view.getLayoutParams();
		                        if(layoutParams.width>=100 &&layoutParams.height>=100){
		                        layoutParams.width=(int) (layoutParams.width * Math.sqrt(scale));
		                        layoutParams.height=(int) (layoutParams.height * Math.sqrt(scale));
		                       
		                        LL.setLayoutParams(layoutParams);
		                        
		                        }*/
		                      
		                        
		                    }
		                    if (lastEvent != null && event.getPointerCount() == 3) {
		                        newRot = rotation(event);
		                        float r = newRot - d;
		                        float[] values = new float[9];
		                        matrix.getValues(values);
		                        float tx = values[2];
		                        float ty = values[5];
		                        float sx = values[0];
		                        float xc = (view.getWidth() / 2) * sx;
		                        float yc = (view.getHeight() / 2) * sx;
		                        matrix.postRotate(r, tx + xc, ty + yc);
		                    }
		                }
		                break;
		        }

		        view.setImageMatrix(matrix);
		        view.setLayoutParams(new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT));
		        
		      /*  final ImageView iv = (ImageView)view;
                
                ViewTreeObserver vto = iv.getViewTreeObserver();
                vto.addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener() {
                    public boolean onPreDraw() {
                        iv.getViewTreeObserver().removeOnPreDrawListener(this);
                        int finalHeight = iv.getMeasuredHeight();
                        int finalWidth = iv.getMeasuredWidth();
                        Log.d("myLog", "W:"+finalWidth +"H:"+ finalHeight);
                        return true;
                    }
                });*/
		        return true;
		}
    	
    	
    };


    /**
     * Determine the space between the first two fingers
     */
    private float spacing(MotionEvent event) {
        float x = event.getX(0) - event.getX(1);
        float y = event.getY(0) - event.getY(1);
        return FloatMath.sqrt(x * x + y * y);
    }

    /**
     * Calculate the mid point of the first two fingers
     */
    private void midPoint(PointF point, MotionEvent event) {
        float x = event.getX(0) + event.getX(1);
        float y = event.getY(0) + event.getY(1);
        point.set(x / 2, y / 2);
    }

    /**
     * Calculate the degree to be rotated by.
     *
     * @param event
     * @return Degrees
     */
    private float rotation(MotionEvent event) {
        double delta_x = (event.getX(0) - event.getX(1));
        double delta_y = (event.getY(0) - event.getY(1));
        double radians = Math.atan2(delta_y, delta_x);
        return (float) Math.toDegrees(radians);
    }
}