package com.cmapp.test;

import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.lang.Thread.State;
import java.util.Calendar;

import android.app.Activity;
import android.content.ContentValues;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.Matrix;
import android.media.ExifInterface;
import android.media.ThumbnailUtils;
import android.net.Uri;
import android.os.Bundle;
import android.os.Environment;
import android.provider.MediaStore;
import android.text.format.DateFormat;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;

public class cameraActivity extends Activity {
	private static final int IMAGE_CHOOSER_RESULTCODE = 100;
	private Uri mPictureUri;  
	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		super.onCreate(savedInstanceState);
		setContentView(R.layout.camera);
		
		Button btCamera=(Button) findViewById(R.id.btCamera);
		Button btGallery=(Button) findViewById(R.id.btGallery);
		btCamera.setOnClickListener(btListener);
		btGallery.setOnClickListener(btListener);
	}
	
	private Button.OnClickListener btListener =new Button.OnClickListener (){

		@Override
		public void onClick(View v) {
			// TODO Auto-generated method stub
			if(v.getId()==R.id.btCamera){
				launchChooser("Camera");
			}
			if(v.getId()==R.id.btGallery){
				launchChooser("Gallery");
			}
			
		}
		
		
	};
	  
	private void launchChooser(String type) {  
	    //Gallery
	    Intent i = new Intent(Intent.ACTION_GET_CONTENT);  
	    i.setType("image/*");  
	    i.addCategory(Intent.CATEGORY_OPENABLE);  
	  
	    // camera  
	    String filename = System.currentTimeMillis() + ".jpg";  
	    ContentValues values = new ContentValues();  
	    values.put(MediaStore.Images.Media.TITLE, filename);  
	    values.put(MediaStore.Images.Media.MIME_TYPE, "image/jpeg");  
	    mPictureUri = getContentResolver()  
	        .insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);  
	    
	    Intent i2 = new Intent(MediaStore.ACTION_IMAGE_CAPTURE );  
	    String text = (String) DateFormat.format("yyyyMMddkkmmss", Calendar.getInstance()); 
	    File image=new File(Environment.getExternalStorageDirectory(),text+".jpg");
	    i2.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(image));  
	    mPictureUri=Uri.fromFile(image);
	    
	    // Gallery  Intent
	    Intent chooserIntent = Intent.createChooser(i, "Pick Image");  
	    // add Camera  
	    chooserIntent.putExtra(Intent.EXTRA_INITIAL_INTENTS, new Intent[] { i2 });  
	    if(type.equals("Camera")){
	    	startActivityForResult(i2, IMAGE_CHOOSER_RESULTCODE);  
	    }
	    if(type.equals("Gallery")){
	    	startActivityForResult(i, IMAGE_CHOOSER_RESULTCODE);  
	    }
	}  
	  
	@Override  
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {  
	    if (requestCode == IMAGE_CHOOSER_RESULTCODE && resultCode == RESULT_OK ) {  
	  
	    	ImageView iv = (ImageView) findViewById(R.id.imgCamera); 
	    	
	        if (resultCode != RESULT_OK) {  
	            if (mPictureUri != null) {  
	                getContentResolver().delete(mPictureUri, null, null);  
	                mPictureUri = null;  
	            }  
	            return;  
	        }  
	  
	       
	        
	        Uri result = (data == null) ? mPictureUri : data.getData();  
	        File imageFile = new File(result.toString());
	        int rotation = neededRotation(result);
	        iv.setRotation(rotation);
	        iv.setImageURI(result);  
	  
	        mPictureUri = null;
	    }  
	} 
	public static int neededRotation(Uri ff)
    {
    try
        {
        ExifInterface exif = new ExifInterface(ff.getPath());
        int orientation = exif.getAttributeInt(
           ExifInterface.TAG_ORIENTATION, ExifInterface.ORIENTATION_NORMAL);

        if (orientation == ExifInterface.ORIENTATION_ROTATE_270)
            { return 270; }
        if (orientation == ExifInterface.ORIENTATION_ROTATE_180)
            { return 180; }
        if (orientation == ExifInterface.ORIENTATION_ROTATE_90)
            { return 90; }
        return 0;

        } catch (FileNotFoundException e)
        {
        e.printStackTrace();
        } catch (IOException e)
        {
        e.printStackTrace();
        }
    return 0;
    }
	
	
}
